/*=========================================================
@gstorage command
by Missingno
===========================================================
Request: http://goo.gl/bbkWLM
===========================================================
Description:
Allows for guildmaster to grant or revoke access to guild
storage. Supports guildmaster changes and expulsions.
===========================================================
SQL table:
CREATE TABLE IF NOT EXISTS `guild_storage_access` (
	`guild_id` int(11) NOT NULL,
	`char_id` int(11) NOT NULL,
	PRIMARY KEY  (`char_id`)
) ENGINE=MyISAM;
===========================================================
Compatibility:
Optimised for rAthena emulators.
===========================================================
Changelog:
v1.0 - First version.
	v1.1 - Removed unnecessary global arrays.
		v1.1.1 - Added SQL table to initialise data.
		v1.1.2 - Added temporary global arrays for caching.
		v1.1.3 - Fixed duplicate key error in SQL update.
		v1.1.4 - Escaped strings in SQL queries.
=========================================================*/

-	script	guildstorage	-1,{
	
	// Function: Return character name of sent ID
	function getcharname {
		query_sql "SELECT `name` FROM `char` WHERE `char_id` = '"+ getarg(0) +"'", .@query_name$;
		return .@query_name$;
	}
	
	
	OnInit:
		// Store values from SQL table in temporary global array
		query_sql "SELECT `guild_id`,`char_id` FROM `guild_storage_access`", $@GS_Guild, $@GS_Member;
	
		// Configuration
		bindatcmd "guildstorage", strnpcinfo(3) +"::OnAtcommand", 0, 0;
		bindatcmd "gstorage", strnpcinfo(3) +"::OnAtcommand", 0, 0;
		end;

		
	OnAtcommand:
		// Check if player is in town
		if (!getmapflag(strcharinfo(3), mf_town)) {
			message strcharinfo(0), "You may only use guild storage in towns.";
		
		// Guild master access
		} else if (getguildmasterid(getcharid(2)) == getcharid(0)) {
			while (1) {
				switch (select("Open storage:Change permissions:End session")) {
					case 1:
						// Open storage
						message strcharinfo(0), "Guild storage opened.";
						guildopenstorage();
						close;
						
					case 2:
						// Clear looped data
						cleararray .@access_list$[0], "", getarraysize(.@access_list$);
						cleararray .@member_list$[0], "", getarraysize(.@member_list$);
						.@j = 0;
					
						// Build access list
						for (.@i = 0; .@i < getarraysize($@GS_Guild); .@i++) {
							if ($@GS_Guild[.@i] == getcharid(2)) {
								.@access_list$[.@j++] = getcharname($@GS_Member[.@i]);
							}
						}
						
						// Inject "Add new member" option
						.@access_list$[getarraysize(.@access_list$)] = "Add new member";
						
						// Inject "Go back" option
						.@access_list$[getarraysize(.@access_list$)] = "Go back";
						
						// Select member to modify
						menu implode(.@access_list$, ":"), -;
						.@access_choice = @menu - 1;
						
						// Check if last option selected
						if (@menu == getarraysize(.@access_list$)) {
							break;
						}
						
						// Check if second to last option selected
						if (@menu == getarraysize(.@access_list$) - 1) {
							// Build member list
							query_sql "SELECT `name` FROM `guild_member` WHERE `guild_id` = '"+ getcharid(2) +"'", .@member_list$;
						
							// Inject "Go back" option
							.@member_list$[getarraysize(.@member_list$)] = "Go back";
						
							// Add new member
							menu implode(.@member_list$, ":"), -;
							.@member_choice = @menu - 1;
							
							// Check if last option selected
							if (.@member_choice == getarraysize(.@member_list$)) {
								break;
							}
							
							// Add member's ID to SQL table
							message strcharinfo(0), "Granted guild storage access for '"+ .@member_list$[.@member_choice] +"'.";
							query_sql "SELECT `char_id` FROM `guild_member` WHERE `name` = '"+ escape_sql(.@member_list$[.@member_choice]) +"'", .@member_id;
							query_sql "INSERT INTO `guild_storage_access` (`guild_id`, `char_id`) VALUES ('"+ getcharid(2) +"', '"+ .@member_id +"') ON DUPLICATE KEY UPDATE `guild_id` = '"+ getcharid(2) +"'";
							
							// Update existing ID in temporary global array
							for (.@i = 0; .@i < getarraysize($@GS_Member); .@i++) {
								if ($@GS_Member[.@i] == .@member_id) {
									$@GS_Guild[.@i] = getcharid(2);
									.@updated = 1;
									break;
								}
							}
							
							// Add new value in temporary global array
							if (!.@updated) {
								$@GS_Guild[getarraysize($@GS_Guild)] = getcharid(2);
								$@GS_Member[getarraysize($@GS_Member)] = .@member_id;
							}
							
							break;
						}
						
						// Revoke access
						switch (select("Revoke access:Go back")) {
							case 1:
								message strcharinfo(0), "Revoked guild storage access for '"+ .@access_list$[.@access_choice] +"'.";
								query_sql "SELECT `char_id` FROM `guild_member` WHERE `name` = '"+ escape_sql(.@access_list$[.@access_choice]) +"'", .@member_id;
								query_sql "DELETE FROM `guild_storage_access` WHERE `char_id` = '"+ .@member_id +"'";
								
								// Clear entries in temporary global array
								for (.@i = 0; .@i < getarraysize($@GS_Member); .@i++) {
									if ($@GS_Member[.@i] == .@member_id) {
										deletearray $@GS_Guild[.@i], 1;
										deletearray $@GS_Member[.@i], 1;
									}
								}
								
								break;
						
							case 2:
								break;
						}
						
						break;
					
					case 3:
						close;
				}
			}
			
		// Guild member access
		} else if (getcharid(2)) {
			// Check permission
			for (.@i = 0; .@i < getarraysize($@GS_Member); .@i++) {
				// Open storage
				if ($@GS_Member[.@i] == getcharid(0) && $@GS_Guild[.@i] == getcharid(2)) {
					message strcharinfo(0), "Guild storage opened.";
					guildopenstorage();
					end;
				}
			}
				
			// Unauthorised access
			message strcharinfo(0), "You are not authorised to access guild storage.";
			
		// No guild
		} else {
			message strcharinfo(0), "You are not in a guild.";
		}
		
		// Fail message
		message strcharinfo(0), .@atcmd_command$ +" failed.";
		end;

}
